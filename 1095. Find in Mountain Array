/**
 * // This is the MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * class MountainArray {
 *   public:
 *     int get(int index){};
 *     int length();
 * };
 */

class Solution {
public:
    int found1=-1;
    int found2=-1;
    int findInMountainArray(int target, MountainArray &mountainArr) {
        int peak = peakvalue(mountainArr);
        int ans1 = firstBinarysearch(mountainArr,target,0,peak);
        int ans2 = secondBinarysearch(mountainArr,target,peak+1,mountainArr.length()-1);
        
        //return ans2;
        // if(ans1 == -1 && ans2 ==-1){
        //     return -1;
        // }
        // else if(ans1 == -1 && ans2!=-1){
        //     return ans2;
        // }else if(ans1!=-1 && ans2 == 1){
        //     return ans2;
        // }
        // return min(ans1,ans2);
        // return min(ans1,ans2);
        if(ans1 != -1){
            return ans1;
        }else{
           return ans2; 
        }
            //return peak;
        
        
        
    }
    int firstBinarysearch(MountainArray &mountainArr,int target,int s,int e){
     
        int mid;
        int midval;
        while(s<=e){
             mid = s + (e-s)/2;
            midval = mountainArr.get(mid);
            if(midval==target){
                found1 = mid;
                 return mid;
            }else if(midval>target){
                e = mid -1;
            }else if(target>midval){
                s = mid+1;
            }
            
        }
        return found1;
        
    }
      int secondBinarysearch(MountainArray &mountainArr,int target,int s,int e){
     
        int mid;
        int midval;
        while(s<=e){
             mid = s + (e-s)/2;
            midval = mountainArr.get(mid);
            if(midval==target){
                found2 = mid;
                 return mid;
            }else if(midval>target){
                s = mid+1;
                
            }else if(target>midval){
                e = mid -1;
            }
            
        }
        return found2;
        
    }
    
    
    int peakvalue(MountainArray &mountainArr){
        int left =0;
        int right = mountainArr.length()-1;
        int mid = left + (right-left)/2;
        while(left<right){
            mid = left + (right-left)/2;
            if(mountainArr.get(mid)<mountainArr.get(mid+1)){
                left = mid+1;
            }else if(mountainArr.get(mid)>mountainArr.get(mid+1)){
                right = mid;
            }
        }return left;
    }
};
